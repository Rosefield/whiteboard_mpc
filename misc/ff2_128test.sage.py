

# This file was *autogenerated* from the file ../misc/ff2_128test.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_128 = Integer(128); _sage_const_7 = Integer(7); _sage_const_1 = Integer(1); _sage_const_64 = Integer(64)
F = GF(_sage_const_2 **_sage_const_128 , name='a', modulus=x**_sage_const_128  + x**_sage_const_7  + x**_sage_const_2  + x + _sage_const_1 )

def split(x):
    return (x.integer_representation() >> _sage_const_64 , x.integer_representation() & (_sage_const_2 **_sage_const_64  - _sage_const_1 ))

def output_mul(x,y,z):
    return f"""
    {{
        let x = FF2_128::new{split(x)};
        let y = FF2_128::new{split(y)};
        let z = FF2_128::new{split(z)};
        assert!(x*y == z);
    }}
    """

def make_mul_case():
    x,y = F.random_element(), F.random_element()
    z = x*y
    print(output_mul(x,y,z))

make_mul_case()
make_mul_case()
make_mul_case()


def output_inv(x,y):
    return f"""
    {{
        let x = FF2_128::new{split(x)};
        let y = FF2_128::new{split(y)};
        assert!(x.inv() == Some(y));
    }}
    """

def make_inv_case():
    x = F.random_element()
    y = x**-_sage_const_1 
    print(output_inv(x,y))

make_inv_case()
make_inv_case()
make_inv_case()

